# -*- coding: utf-8 -*-
# flake8:noqa
# isort:skip_file
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
##############################################################################
# Note: Generated by soapfish.wsdl2py at 2018-11-29 08:17:00.366077
#       Try to avoid editing it if you might need to regenerate it.
##############################################################################

from soapfish import soap, xsd

BaseHeader = xsd.ComplexType

##############################################################################
# Schemas


# http://example.com/HelloWorld


class RequestInterface(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    userName = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ResponseInterface(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    returnMessage = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


Schema_ab251 = xsd.Schema(
    imports=[],
    includes=[],
    targetNamespace='http://example.com/HelloWorld',
    elementFormDefault='qualified',
    simpleTypes=[],
    attributeGroups=[],
    groups=[],
    complexTypes=[],
    elements={'RequestInterface': xsd.Element(RequestInterface()), 'ResponseInterface': xsd.Element(ResponseInterface())},
)


##############################################################################
# Operations


def requestMessage(request, RequestInterface):

    # FIXME 自分のものに差し替え
    # TODO: Put your implementation here.
    # return ResponseInterface
    return ResponseInterface(returnMessage=f'Hello, {RequestInterface.userName}')


##############################################################################
# Methods


requestMessage_method = xsd.Method(
    function=requestMessage,
    soapAction='http://example.com/HelloWorld/requestMessage',
    input='RequestInterface',
    inputPartName='parameters',
    output='ResponseInterface',
    outputPartName='parameters',
    operationName='requestMessage',
)


##############################################################################
# SOAP Service


HelloServicePort_SERVICE = soap.Service(
    name='HelloServicePort',
    targetNamespace='http://example.com/HelloWorld',

    # FIXME 自分の設定へと修正
    location='http://localhost/hello',
    # location='${scheme}://${host}/hello',

    schemas=[Schema_ab251],
    version=soap.SOAPVersion.SOAP11,
    methods=[requestMessage_method],
)


##############################################################################


# NOTE: Uncomment the following lines to turn on dispatching for Django:
# from soapfish.django_ import django_dispatcher
# dispatcher = django_dispatcher(HelloServicePort_SERVICE)


# NOTE: Put these lines in the urls.py for your project or application:
# urlpatterns += patterns('',
#     (r'^hello$', '<module>.dispatcher'),
# )


from wsgiref.simple_server import make_server
from soapfish import soap_dispatch

dispatcher = soap_dispatch.SOAPDispatcher(HelloServicePort_SERVICE)

# FIXME 引数をdictからdispatcherへと修正(エラーが出たため)
# AttributeError: 'dict' object has no attribute 'dispatch'
app = soap_dispatch.WsgiSoapApplication(dispatcher)

print('Serving HTTP on port 9100...')
httpd = make_server('', 9100, app)
httpd.serve_forever()